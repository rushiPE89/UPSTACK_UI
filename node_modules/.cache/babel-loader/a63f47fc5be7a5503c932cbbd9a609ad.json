{"ast":null,"code":"var _jsxFileName = \"/Users/rushikeshkhadsare/Downloads/upstac-ui/src/lab/LabHistory.js\";\nimport { Button, React, useHistory, useState } from \"../component\";\nimport { doGetMyLabHistory } from \"./labDispatcher\";\nimport RequestHistory from \"../testrequests/RequestHistory\";\nimport { Fragment } from \"react\";\nimport { useGlobalStyles } from \"../styles/GlobalStyles\";\n\nfunction LabHistory() {\n  const classes = useGlobalStyles();\n  const history = useHistory();\n  const [requests, setRequests] = useState([]);\n\n  async function onUpdateLabHistory(index) {\n    const currentRequest = requests[index];\n    console.log(currentRequest);\n    history.push(\"/update-lab-report/\" + currentRequest.requestId);\n  }\n\n  const actionColumns = [{\n    name: 'Actions',\n    options: {\n      filter: false,\n      sort: false,\n      empty: true,\n      customBodyRenderLite: dataIndex => {\n        const currentRequest = requests[dataIndex];\n\n        if (currentRequest && currentRequest.status && currentRequest.status == \"LAB_TEST_IN_PROGRESS\") {\n          return /*#__PURE__*/React.createElement(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 30\n            }\n          }, /*#__PURE__*/React.createElement(Button, {\n            onClick: () => {\n              onUpdateLabHistory(dataIndex);\n            },\n            color: \"secondary\",\n            variant: \"outlined\",\n            className: classes.link,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 36,\n              columnNumber: 25\n            }\n          }, \"Update\"));\n        } else {\n          return /*#__PURE__*/React.createElement(Fragment, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 28\n            }\n          });\n        }\n      }\n    }\n  }];\n  return /*#__PURE__*/React.createElement(RequestHistory, {\n    actionColumns: actionColumns,\n    getMyHistory: doGetMyLabHistory,\n    onDataLoaded: results => {\n      setRequests(results);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  });\n}\n\nexport default LabHistory;","map":{"version":3,"sources":["/Users/rushikeshkhadsare/Downloads/upstac-ui/src/lab/LabHistory.js"],"names":["Button","React","useHistory","useState","doGetMyLabHistory","RequestHistory","Fragment","useGlobalStyles","LabHistory","classes","history","requests","setRequests","onUpdateLabHistory","index","currentRequest","console","log","push","requestId","actionColumns","name","options","filter","sort","empty","customBodyRenderLite","dataIndex","status","link","results"],"mappings":";AAAA,SAAQA,MAAR,EAAgBC,KAAhB,EAAuBC,UAAvB,EAAmCC,QAAnC,QAAmD,cAAnD;AACA,SAAQC,iBAAR,QAAgC,iBAAhC;AACA,OAAOC,cAAP,MAA2B,gCAA3B;AACA,SAAQC,QAAR,QAAuB,OAAvB;AACA,SAAQC,eAAR,QAA8B,wBAA9B;;AAGA,SAASC,UAAT,GAAsB;AAElB,QAAMC,OAAO,GAAGF,eAAe,EAA/B;AACA,QAAMG,OAAO,GAAGR,UAAU,EAA1B;AAEA,QAAM,CAACS,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,EAAD,CAAxC;;AAEA,iBAAeU,kBAAf,CAAkCC,KAAlC,EAAwC;AACpC,UAAMC,cAAc,GAAGJ,QAAQ,CAACG,KAAD,CAA/B;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYF,cAAZ;AACAL,IAAAA,OAAO,CAACQ,IAAR,CAAa,wBAAwBH,cAAc,CAACI,SAApD;AAGH;;AAGD,QAAMC,aAAa,GAAE,CAAC;AAClBC,IAAAA,IAAI,EAAE,SADY;AAElBC,IAAAA,OAAO,EAAE;AACLC,MAAAA,MAAM,EAAE,KADH;AAELC,MAAAA,IAAI,EAAE,KAFD;AAGLC,MAAAA,KAAK,EAAE,IAHF;AAILC,MAAAA,oBAAoB,EAAGC,SAAD,IAAe;AAEjC,cAAMZ,cAAc,GAAGJ,QAAQ,CAACgB,SAAD,CAA/B;;AACA,YAAGZ,cAAc,IAAIA,cAAc,CAACa,MAAjC,IAA2Cb,cAAc,CAACa,MAAf,IAAyB,sBAAvE,EAA8F;AAC1F,8BAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAEL,oBAAC,MAAD;AAAQ,YAAA,OAAO,EAAE,MAAM;AACnBf,cAAAA,kBAAkB,CAACc,SAAD,CAAlB;AACH,aAFD;AAEG,YAAA,KAAK,EAAC,WAFT;AAEqB,YAAA,OAAO,EAAC,UAF7B;AAEwC,YAAA,SAAS,EAAElB,OAAO,CAACoB,IAF3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFK,CAAT;AAWH,SAZD,MAYK;AACD,8BAAO,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;AAIJ;AAzBI;AAFS,GAAD,CAArB;AA+BA,sBACE,oBAAC,cAAD;AAAgB,IAAA,aAAa,EAAET,aAA/B;AAA8C,IAAA,YAAY,EAAEhB,iBAA5D;AAA+E,IAAA,YAAY,EAAI0B,OAAD,IAAa;AACvGlB,MAAAA,WAAW,CAACkB,OAAD,CAAX;AACH,KAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAMH;;AAED,eAAetB,UAAf","sourcesContent":["import {Button, React, useHistory, useState,} from \"../component\"\nimport {doGetMyLabHistory} from \"./labDispatcher\";\nimport RequestHistory from \"../testrequests/RequestHistory\";\nimport {Fragment} from \"react\";\nimport {useGlobalStyles} from \"../styles/GlobalStyles\";\n\n\nfunction LabHistory() {\n\n    const classes = useGlobalStyles();\n    const history = useHistory();\n\n    const [requests, setRequests] = useState([]);\n\n    async function onUpdateLabHistory(index){\n        const currentRequest = requests[index]\n        console.log(currentRequest)\n        history.push(\"/update-lab-report/\" + currentRequest.requestId)\n\n\n    }\n\n\n    const actionColumns =[{\n        name: 'Actions',\n        options: {\n            filter: false,\n            sort: false,\n            empty: true,\n            customBodyRenderLite: (dataIndex) => {\n\n                const currentRequest = requests[dataIndex]\n                if(currentRequest && currentRequest.status && currentRequest.status == \"LAB_TEST_IN_PROGRESS\"){\n                    return   <div>\n\n                        <Button onClick={() => {\n                            onUpdateLabHistory(dataIndex)\n                        }} color=\"secondary\" variant=\"outlined\" className={classes.link}>\n                            Update\n                        </Button>\n\n\n\n                    </div>\n                }else{\n                    return <Fragment></Fragment>\n                }\n\n\n\n            },\n        }\n    }]\n\n    return (\n      <RequestHistory actionColumns={actionColumns} getMyHistory={doGetMyLabHistory} onDataLoaded ={(results) => {\n          setRequests(results)\n      }}></RequestHistory>\n\n    )\n}\n\nexport default LabHistory\n"]},"metadata":{},"sourceType":"module"}