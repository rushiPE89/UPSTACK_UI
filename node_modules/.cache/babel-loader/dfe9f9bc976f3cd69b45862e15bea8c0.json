{"ast":null,"code":"import { createReducer } from \"../config/create-reducer\";\nimport { REHYDRATE } from 'redux-persist';\nimport { setAuthToken } from \"./authDispatcher\";\nexport const LOGIN = \"auth/login\";\nexport const LOGOUT = \"auth/logout\";\n\nconst getDefaultRoles = () => {\n  return getApplicableRoles({\n    role: \"ANONYMOUS\"\n  });\n};\n\nexport const getApplicableRoles = user => {\n  const isApproved = user.status === \"APPROVED\";\n  let role = user.role;\n  const isUser = role === \"USER\";\n  const isDoctor = role === \"DOCTOR\";\n  const isAuthority = role === \"GOVERNMENT_AUTHORITY\";\n  const isTester = role === \"TESTER\";\n  return {\n    isUser,\n    isDoctor,\n    isAuthority,\n    isTester,\n    isApproved\n  };\n};\nexport const initialState = {\n  isLoggedIn: false,\n  token: null,\n  user: null,\n  roles: getDefaultRoles()\n};\n\nconst loginUser = (state, action) => {\n  var _action$payload;\n\n  let updatedState = {};\n\n  if (action === null || action === void 0 ? void 0 : (_action$payload = action.payload) === null || _action$payload === void 0 ? void 0 : _action$payload.user) {\n    const roles = getApplicableRoles(action.payload.user);\n    updatedState = {\n      isLoggedIn: true,\n      token: action.payload.token,\n      user: action.payload.user,\n      roles\n    };\n  }\n\n  return { ...state,\n    ...updatedState\n  };\n};\n\nconst logOutUser = (state, action) => {\n  return { ...state,\n    isLoggedIn: false,\n    token: null,\n    user: null,\n    roles: getDefaultRoles()\n  };\n};\n\nconst rehydrateApp = (state, action) => {\n  var _action$payload2, _action$payload2$auth;\n\n  if (action === null || action === void 0 ? void 0 : (_action$payload2 = action.payload) === null || _action$payload2 === void 0 ? void 0 : (_action$payload2$auth = _action$payload2.auth) === null || _action$payload2$auth === void 0 ? void 0 : _action$payload2$auth.user) {\n    let {\n      auth\n    } = action.payload;\n    let {\n      user,\n      token\n    } = auth;\n    setAuthToken(token);\n    const roles = getApplicableRoles(user);\n    return { ...state,\n      isLoggedIn: true,\n      token: token,\n      user: user,\n      roles\n    };\n  } else {\n    return { ...state\n    };\n  }\n};\n\nconst authReducer = createReducer(initialState, {\n  [LOGIN]: loginUser,\n  [REHYDRATE]: rehydrateApp,\n  [LOGOUT]: logOutUser\n});\nexport default authReducer;","map":{"version":3,"sources":["/Users/rushikeshkhadsare/Downloads/upstac-ui/src/auth/authStore.js"],"names":["createReducer","REHYDRATE","setAuthToken","LOGIN","LOGOUT","getDefaultRoles","getApplicableRoles","role","user","isApproved","status","isUser","isDoctor","isAuthority","isTester","initialState","isLoggedIn","token","roles","loginUser","state","action","updatedState","payload","logOutUser","rehydrateApp","auth","authReducer"],"mappings":"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","sourcesContent":["import {createReducer} from \"../config/create-reducer\";\nimport {REHYDRATE} from 'redux-persist';\nimport {setAuthToken} from \"./authDispatcher\";\n\nexport const LOGIN = \"auth/login\";\nexport const LOGOUT = \"auth/logout\";\n\n\n\nconst getDefaultRoles =()=>{\n    return getApplicableRoles({role:\"ANONYMOUS\"})\n}\nexport const getApplicableRoles =(user)=>{\n\n\n    const isApproved = (user.status === \"APPROVED\")\n\n    let role = user.role;\n    const isUser = (role === \"USER\")\n    const isDoctor = (role === \"DOCTOR\")\n    const isAuthority = (role === \"GOVERNMENT_AUTHORITY\")\n    const isTester = (role === \"TESTER\")\n\n\n    return {isUser,isDoctor,isAuthority,isTester,isApproved}\n}\n\nexport const initialState = {\n    isLoggedIn:false,\n    token:null,\n    user:null,\n    roles:getDefaultRoles()\n}\n\n\nconst loginUser =(state,action)=>{\n\n    let updatedState = {}\n    if(action?.payload?.user){\n        const roles =getApplicableRoles(action.payload.user)\n        updatedState={isLoggedIn:true,token:action.payload.token,user:action.payload.user,roles}\n    }\n    return { ...state,...updatedState}\n\n\n\n};\nconst logOutUser =(state,action)=>{\n\n    return { ...state,isLoggedIn:false,token:null,user:null,roles:getDefaultRoles()}\n\n};\nconst rehydrateApp =(state,action)=>{\n\n    if(action?.payload?.auth?.user){\n        let {auth} = action.payload;\n        let {user,token} = auth\n        setAuthToken(token)\n        const roles =getApplicableRoles(user)\n\n        return { ...state,isLoggedIn:true,token:token,user:user,roles}\n    }else {\n        return {...state}\n    }\n\n\n};\n\n\n\n\nconst authReducer = createReducer(initialState, {\n    [LOGIN]: loginUser,\n    [REHYDRATE]:rehydrateApp,\n    [LOGOUT]: logOutUser\n\n\n\n});\n\n\nexport default authReducer;\n\n"]},"metadata":{},"sourceType":"module"}