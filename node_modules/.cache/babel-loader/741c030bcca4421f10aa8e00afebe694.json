{"ast":null,"code":"var _jsxFileName = \"/Users/rushikeshkhadsare/Downloads/upstac-ui/src/testrequests/RequestHistory.js\";\nimport { Container, Grid, makeStyles, React, useEffect, useState } from \"../component\";\nimport MUIDataTable from \"mui-datatables\";\nimport { appNotification } from \"../shared/notification/app-notification\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TestFlow from \"../testrequests/TestFlow\";\nimport { useGlobalStyles } from \"../styles/GlobalStyles\";\nimport { getRequestHistoryOptions } from \"../authority/shared/view-all-request-options\";\n\nfunction RequestHistory(props) {\n  const classes = useGlobalStyles();\n  const [data, setData] = useState([]);\n  const [requests, setRequests] = useState([]);\n  let columns = [{\n    name: \"Test Request ID\",\n    options: {\n      filter: true\n    }\n  }, {\n    name: \"Name\",\n    options: {\n      filter: true\n    }\n  }, {\n    name: \"Age\",\n    options: {\n      filter: true\n    }\n  }, {\n    name: \"Status\",\n    options: {\n      filter: true\n    }\n  }];\n  const {\n    actionColumns\n  } = props;\n  if (actionColumns && actionColumns.length > 0) columns = columns.concat(actionColumns);\n  const options = getRequestHistoryOptions(requests); // const oldOptions = {\n  //     filter: true,\n  //     filterType: 'dropdown',\n  //     responsive: 'standard',\n  //     selectableRows:'none',\n  //     expandableRows: true,\n  //     expandableRowsHeader: false,\n  //     expandableRowsOnClick: false,\n  //     isRowExpandable: (dataIndex, expandedRows) => {\n  //         const testRequest =  getTestRequest(dataIndex)\n  //\n  //         return testRequest.status !== \"INITIATED\";\n  //     },\n  //     renderExpandableRow: (rowData, rowMeta) => {\n  //\n  //         const {dataIndex} = rowMeta\n  //\n  //         const testRequest =  getTestRequest(dataIndex)\n  //         const {requestId} =  testRequest\n  //         const colSpan = rowData.length + 1;\n  //         return (\n  //             <TableRow>\n  //                 <TableCell colSpan={colSpan}>\n  //                     <TestFlow requestId={requestId}></TestFlow>\n  //                 </TableCell>\n  //             </TableRow>\n  //         );\n  //\n  //     },\n  //     onRowExpansionChange: (curExpanded, allExpanded, rowsExpanded) => {\n  //\n  //     }\n  // };\n\n  function reloadTests() {\n    const {\n      getMyHistory,\n      onDataLoaded\n    } = props;\n    getMyHistory().subscribe(allTestRequests => {\n      setRequests(allTestRequests);\n      const buffer = allTestRequests.map(item => {\n        return [item.requestId, item.name, item.age, item.status];\n      });\n      const results = [];\n      results.push(buffer);\n      setData(buffer);\n      if (onDataLoaded) onDataLoaded(allTestRequests);\n    }, error => {\n      // console.log(error)\n      appNotification.showError(error);\n    });\n  }\n\n  useEffect(() => {\n    reloadTests();\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    maxWidth: \"md\",\n    component: \"main\",\n    className: classes.heroContent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 17\n    }\n  }, \"Request History\"), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Container, {\n    component: \"main\",\n    maxWidth: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(MUIDataTable, {\n    title: \"Request History\",\n    data: data,\n    columns: columns,\n    options: options,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 25\n    }\n  })))));\n}\n\nexport default RequestHistory;","map":{"version":3,"sources":["/Users/rushikeshkhadsare/Downloads/upstac-ui/src/testrequests/RequestHistory.js"],"names":["Container","Grid","makeStyles","React","useEffect","useState","MUIDataTable","appNotification","TableRow","TableCell","TestFlow","useGlobalStyles","getRequestHistoryOptions","RequestHistory","props","classes","data","setData","requests","setRequests","columns","name","options","filter","actionColumns","length","concat","reloadTests","getMyHistory","onDataLoaded","subscribe","allTestRequests","buffer","map","item","requestId","age","status","results","push","error","showError","heroContent"],"mappings":"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","sourcesContent":["import {Container, Grid, makeStyles, React, useEffect, useState,} from \"../component\"\r\nimport MUIDataTable from \"mui-datatables\";\r\nimport {appNotification} from \"../shared/notification/app-notification\";\r\n\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TestFlow from \"../testrequests/TestFlow\";\r\nimport {useGlobalStyles} from \"../styles/GlobalStyles\";\r\nimport {getRequestHistoryOptions} from \"../authority/shared/view-all-request-options\";\r\n\r\n\r\n\r\nfunction RequestHistory(props) {\r\n    const classes = useGlobalStyles();\r\n\r\n    const [data, setData] = useState([]);\r\n\r\n    const [requests, setRequests] = useState([]);\r\n\r\n\r\n\r\n    let columns = [\r\n       {\r\n            name: \"Test Request ID\",\r\n            options: {\r\n                filter: true,\r\n            }\r\n        },\r\n        {\r\n            name: \"Name\",\r\n            options: {\r\n                filter: true,\r\n            }\r\n        },\r\n        {\r\n\r\n            name: \"Age\",\r\n            options: {\r\n                filter: true,\r\n            }\r\n        },\r\n        {\r\n\r\n            name: \"Status\",\r\n            options: {\r\n                filter: true,\r\n            }\r\n        }\r\n\r\n    ];\r\n\r\n    const {actionColumns} =props\r\n\r\n    if(actionColumns && actionColumns.length > 0)\r\n        columns= columns.concat(actionColumns);\r\n\r\n    const options = getRequestHistoryOptions(requests)\r\n    // const oldOptions = {\r\n    //     filter: true,\r\n    //     filterType: 'dropdown',\r\n    //     responsive: 'standard',\r\n    //     selectableRows:'none',\r\n    //     expandableRows: true,\r\n    //     expandableRowsHeader: false,\r\n    //     expandableRowsOnClick: false,\r\n    //     isRowExpandable: (dataIndex, expandedRows) => {\r\n    //         const testRequest =  getTestRequest(dataIndex)\r\n    //\r\n    //         return testRequest.status !== \"INITIATED\";\r\n    //     },\r\n    //     renderExpandableRow: (rowData, rowMeta) => {\r\n    //\r\n    //         const {dataIndex} = rowMeta\r\n    //\r\n    //         const testRequest =  getTestRequest(dataIndex)\r\n    //         const {requestId} =  testRequest\r\n    //         const colSpan = rowData.length + 1;\r\n    //         return (\r\n    //             <TableRow>\r\n    //                 <TableCell colSpan={colSpan}>\r\n    //                     <TestFlow requestId={requestId}></TestFlow>\r\n    //                 </TableCell>\r\n    //             </TableRow>\r\n    //         );\r\n    //\r\n    //     },\r\n    //     onRowExpansionChange: (curExpanded, allExpanded, rowsExpanded) => {\r\n    //\r\n    //     }\r\n    // };\r\n\r\n\r\n\r\n\r\n\r\n\r\n    function reloadTests() {\r\n\r\n        const {getMyHistory,onDataLoaded} = props\r\n        getMyHistory()\r\n            .subscribe((allTestRequests) => {\r\n\r\n\r\n                setRequests(allTestRequests)\r\n                const buffer = allTestRequests.map(item=>{\r\n\r\n                    return [item.requestId,item.name,item.age,item.status]\r\n                })\r\n\r\n                const results = []\r\n                results.push(buffer)\r\n                setData(buffer)\r\n                if(onDataLoaded)\r\n                    onDataLoaded(allTestRequests)\r\n\r\n            }, (error => {\r\n\r\n                // console.log(error)\r\n                appNotification.showError(error)\r\n            }))\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n\r\n\r\n        reloadTests();\r\n\r\n\r\n\r\n\r\n\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Container maxWidth=\"md\" component=\"main\" className={classes.heroContent}>\r\n                <h1>\r\n                    Request History\r\n                </h1>\r\n                <hr />\r\n            </Container>\r\n            <Container component=\"main\" maxWidth=\"md\">\r\n                <Grid container>\r\n                    <Grid item md={12}>\r\n\r\n                        <MUIDataTable title={\"Request History\"} data={data} columns={columns} options={options} />\r\n\r\n                    </Grid>\r\n                </Grid>\r\n            </Container>\r\n        </React.Fragment>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default RequestHistory;\r\n"]},"metadata":{},"sourceType":"module"}