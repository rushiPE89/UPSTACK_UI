{"ast":null,"code":"export function getAllDataWithPinCodes(inputs, thresholds) {\n  const pincodes = groupTestRequestsByPincode(inputs, thresholds);\n  const results = [];\n  Object.keys(pincodes).forEach(key => {\n    const value = pincodes[key];\n    results.push({ ...value,\n      pinCode: key\n    });\n  });\n  return results;\n}\nexport function mergeZoneStatusWithPincode(thresholds, pincodes) {\n  const thresholdValues = {\n    \"RED\": 0,\n    \"YELLOW\": 0,\n    \"GREEN\": 0\n  };\n  thresholds.forEach(threshold => {\n    const {\n      thresholdType,\n      maxLimit\n    } = threshold;\n    thresholdValues[thresholdType] = maxLimit;\n  });\n  Object.keys(pincodes).forEach(key => {\n    const {\n      positiveCount\n    } = pincodes[key];\n    if (positiveCount >= thresholdValues[\"RED\"]) pincodes[key]['zoneType'] = 'RED';else if (positiveCount >= thresholdValues[\"GREEN\"] && positiveCount <= thresholdValues[\"YELLOW\"]) pincodes[key]['zoneType'] = 'YELLOW';else pincodes[key]['zoneType'] = 'GREEN';\n  });\n  return pincodes;\n}\n\nfunction createPincodeData(testRequest) {\n  const {\n    positive,\n    negative,\n    homeQuarantine,\n    admitted,\n    tested\n  } = parseFromTestRequest(testRequest);\n  return {\n    positiveCount: positive,\n    negativeCount: negative,\n    homeQuarantineCount: homeQuarantine,\n    admittedCount: admitted,\n    testedCount: tested,\n    zoneType: \"\"\n  };\n}\n\nfunction parseFromTestRequest(item) {\n  const {\n    pinCode,\n    labResult,\n    consultation\n  } = item;\n  const {\n    suggestion\n  } = consultation;\n  const {\n    result\n  } = labResult;\n  const positive = result == 'POSITIVE' ? 1 : 0;\n  const negative = result == 'POSITIVE' ? 0 : 1;\n  const homeQuarantine = suggestion == 'HOME_QUARANTINE' ? 1 : 0;\n  const admitted = suggestion == 'ADMIT' ? 1 : 0;\n  const tested = 1;\n  return {\n    pinCode,\n    labResult,\n    consultation,\n    positive,\n    negative,\n    homeQuarantine,\n    admitted,\n    tested\n  };\n}\n\nfunction addTestRequestToPincode(existingPincodeData, testRequest) {\n  const {\n    positive,\n    negative,\n    homeQuarantine,\n    admitted,\n    tested\n  } = parseFromTestRequest(testRequest);\n  const {\n    positiveCount,\n    homeQuarantineCount,\n    admittedCount,\n    negativeCount,\n    testedCount\n  } = existingPincodeData;\n  return {\n    positiveCount: positiveCount + positive,\n    negativeCount: negativeCount + negative,\n    homeQuarantineCount: homeQuarantineCount + homeQuarantine,\n    admittedCount: admittedCount + admitted,\n    testedCount: testedCount + tested\n  };\n}\n\nexport function groupTestRequestsByPincode(inputs, thresholds) {\n  const pincodes = {};\n  const items = inputs.filter(item => item.status === 'COMPLETED');\n  items.forEach(function (item) {\n    const {\n      pinCode\n    } = item;\n    if (pincodes.hasOwnProperty(pinCode)) pincodes[pinCode] = addTestRequestToPincode(pincodes[pinCode], item);else pincodes[pinCode] = createPincodeData(item);\n  });\n  return mergeZoneStatusWithPincode(thresholds, pincodes);\n  ;\n}\nexport function mergeTestRequestsAndThresholdDetails(testRequests, thresholds) {\n  const pincodes = groupTestRequestsByPincode(testRequests, thresholds);\n  return testRequests.map(item => {\n    const {\n      pinCode\n    } = item;\n    item.pinCodeInfo = pincodes[pinCode];\n    return item;\n  });\n}","map":{"version":3,"sources":["/Users/rushikeshkhadsare/Downloads/upstac-ui/src/authority/shared/authority-data-parser.js"],"names":["getAllDataWithPinCodes","inputs","thresholds","pincodes","groupTestRequestsByPincode","results","Object","keys","forEach","key","value","push","pinCode","mergeZoneStatusWithPincode","thresholdValues","threshold","thresholdType","maxLimit","positiveCount","createPincodeData","testRequest","positive","negative","homeQuarantine","admitted","tested","parseFromTestRequest","negativeCount","homeQuarantineCount","admittedCount","testedCount","zoneType","item","labResult","consultation","suggestion","result","addTestRequestToPincode","existingPincodeData","items","filter","status","hasOwnProperty","mergeTestRequestsAndThresholdDetails","testRequests","map","pinCodeInfo"],"mappings":"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","sourcesContent":["export function getAllDataWithPinCodes(inputs,  thresholds) {\r\n\r\n    const pincodes = groupTestRequestsByPincode(inputs,thresholds)\r\n\r\n    const results = []\r\n    Object.keys(pincodes).forEach(key=>{\r\n        const value = pincodes[key]\r\n        results.push({...value,pinCode:key})\r\n\r\n    })\r\n\r\n    return results;\r\n}\r\n\r\nexport function mergeZoneStatusWithPincode(thresholds, pincodes) {\r\n    const thresholdValues = {\r\n\r\n        \"RED\": 0,\r\n        \"YELLOW\": 0,\r\n        \"GREEN\": 0\r\n    }\r\n\r\n    thresholds.forEach(threshold => {\r\n\r\n        const {thresholdType, maxLimit} = threshold\r\n        thresholdValues[thresholdType] = maxLimit\r\n\r\n    });\r\n\r\n    Object.keys(pincodes).forEach(key => {\r\n\r\n        const {positiveCount} = pincodes[key];\r\n\r\n        if (positiveCount >= thresholdValues[\"RED\"])\r\n            pincodes[key]['zoneType'] = 'RED'\r\n        else if (positiveCount >= thresholdValues[\"GREEN\"] && positiveCount <= thresholdValues[\"YELLOW\"])\r\n            pincodes[key]['zoneType'] = 'YELLOW'\r\n        else\r\n            pincodes[key]['zoneType'] = 'GREEN'\r\n\r\n\r\n    })\r\n\r\n    return pincodes;\r\n}\r\n\r\nfunction createPincodeData(testRequest) {\r\n\r\n    const {positive,negative,homeQuarantine,admitted,tested} = parseFromTestRequest(testRequest)\r\n\r\n\r\n    return {\r\n        positiveCount: positive,\r\n        negativeCount: negative,\r\n        homeQuarantineCount: homeQuarantine,\r\n        admittedCount: admitted,\r\n        testedCount: tested,\r\n        zoneType: \"\"\r\n    };\r\n}\r\n\r\nfunction parseFromTestRequest(item){\r\n    const {pinCode, labResult, consultation} = item\r\n    const {suggestion} = consultation\r\n    const {result} = labResult\r\n    const positive = (result == 'POSITIVE') ? 1 : 0;\r\n    const negative = (result == 'POSITIVE') ? 0 : 1;\r\n    const homeQuarantine = (suggestion == 'HOME_QUARANTINE') ? 1 : 0;\r\n    const admitted = (suggestion == 'ADMIT') ? 1 : 0;\r\n    const tested = 1;\r\n\r\n    return {pinCode, labResult, consultation,positive,negative,homeQuarantine,admitted,tested}\r\n}\r\n\r\n\r\nfunction addTestRequestToPincode(existingPincodeData,testRequest) {\r\n\r\n\r\n    const {positive,negative,homeQuarantine,admitted,tested} = parseFromTestRequest(testRequest)\r\n    const {positiveCount, homeQuarantineCount, admittedCount,negativeCount, testedCount} = existingPincodeData;\r\n\r\n    return     {\r\n        positiveCount: positiveCount + positive,\r\n        negativeCount: negativeCount + negative,\r\n        homeQuarantineCount: homeQuarantineCount + homeQuarantine,\r\n        admittedCount: admittedCount + admitted,\r\n        testedCount: testedCount + tested\r\n    }\r\n\r\n}\r\n\r\nexport function groupTestRequestsByPincode(inputs, thresholds) {\r\n    const pincodes ={}\r\n    const items = inputs.filter(item => item.status === 'COMPLETED')\r\n\r\n    items.forEach(function (item) {\r\n        const {pinCode} = item\r\n        if (pincodes.hasOwnProperty(pinCode))\r\n            pincodes[pinCode] = addTestRequestToPincode( pincodes[pinCode],item)\r\n         else\r\n            pincodes[pinCode] = createPincodeData(item)\r\n\r\n\r\n    });\r\n\r\n    return  mergeZoneStatusWithPincode(thresholds, pincodes);;\r\n}\r\n\r\nexport  function mergeTestRequestsAndThresholdDetails(testRequests, thresholds) {\r\n    const pincodes =groupTestRequestsByPincode(testRequests,  thresholds);\r\n\r\n    return testRequests.map(item =>{\r\n\r\n        const {pinCode} =item;\r\n        item.pinCodeInfo = pincodes[pinCode]\r\n        return item;\r\n    });\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}