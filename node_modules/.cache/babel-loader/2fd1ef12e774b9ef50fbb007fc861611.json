{"ast":null,"code":"var _jsxFileName = \"/Users/rushikeshkhadsare/Downloads/upstac-ui/src/authority/UpdateThreshold.js\";\nimport { Button, Container, Grid, React, TextField, useEffect, useState } from \"../component\";\nimport { appNotification } from \"../shared/notification/app-notification\";\nimport { doGetThresholds, doUpdateAllThresholds } from \"./shared/authorityDispatcher\";\nimport { useGlobalStyles } from \"../styles/GlobalStyles\";\nimport { errorHandler } from \"../shared/common-helpers\";\n\nfunction UpdateThreshold() {\n  const classes = useGlobalStyles();\n  const [thresholds, setThresholds] = useState([]);\n\n  function updateThreshold(thresholdType, maxLimit) {\n    const updatedThresholds = thresholds.map(threshold => {\n      if (threshold.thresholdType === thresholdType) return {\n        thresholdType,\n        maxLimit\n      };else return threshold;\n    });\n    setThresholds(updatedThresholds);\n  }\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    doUpdateAllThresholds(thresholds).subscribe(response => {\n      appNotification.showSuccess(\"Succesfully Updated Thresholds\");\n    }, errorHandler);\n  }\n\n  function getAllThresholds() {\n    doGetThresholds().subscribe(result => {\n      setThresholds(result);\n    }, errorHandler);\n  }\n\n  useEffect(() => {\n    getAllThresholds();\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    maxWidth: \"md\",\n    component: \"main\",\n    className: classes.heroContent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }\n  }, \"Update Thresholds\"), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Container, {\n    maxWidth: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    justify: \"center\",\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    md: 8,\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    className: classes.formFullWidth,\n    onSubmit: handleSubmit,\n    noValidate: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 29\n    }\n  }, thresholds.map(threshold => /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    key: threshold.thresholdType,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    name: threshold.thresholdType,\n    variant: \"outlined\",\n    required: true,\n    fullWidth: true,\n    id: threshold.thresholdType,\n    label: threshold.thresholdType,\n    value: threshold.maxLimit,\n    onInput: e => updateThreshold(threshold.thresholdType, e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 41\n    }\n  })))), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    fullWidth: true,\n    variant: \"contained\",\n    color: \"primary\",\n    className: classes.submitWithSmallMargin,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 29\n    }\n  }, \"Save Thresholds\"))))));\n}\n\nexport default UpdateThreshold;","map":{"version":3,"sources":["/Users/rushikeshkhadsare/Downloads/upstac-ui/src/authority/UpdateThreshold.js"],"names":["Button","Container","Grid","React","TextField","useEffect","useState","appNotification","doGetThresholds","doUpdateAllThresholds","useGlobalStyles","errorHandler","UpdateThreshold","classes","thresholds","setThresholds","updateThreshold","thresholdType","maxLimit","updatedThresholds","map","threshold","handleSubmit","event","preventDefault","subscribe","response","showSuccess","getAllThresholds","result","heroContent","formFullWidth","e","target","value","submitWithSmallMargin"],"mappings":";AAAA,SAAQA,MAAR,EAAgBC,SAAhB,EAA2BC,IAA3B,EAAiCC,KAAjC,EAAwCC,SAAxC,EAAmDC,SAAnD,EAA8DC,QAA9D,QAA6E,cAA7E;AAEA,SAAQC,eAAR,QAA8B,yCAA9B;AACA,SAAQC,eAAR,EAAyBC,qBAAzB,QAAqD,8BAArD;AACA,SAAQC,eAAR,QAA8B,wBAA9B;AACA,SAAQC,YAAR,QAA2B,0BAA3B;;AAEA,SAASC,eAAT,GAA2B;AAEvB,QAAMC,OAAO,GAAGH,eAAe,EAA/B;AAEA,QAAM,CAACI,UAAD,EAAaC,aAAb,IAA8BT,QAAQ,CAAC,EAAD,CAA5C;;AAEA,WAASU,eAAT,CAAyBC,aAAzB,EAAuCC,QAAvC,EAAgD;AAE5C,UAAMC,iBAAiB,GAAGL,UAAU,CAACM,GAAX,CAAeC,SAAS,IAAE;AAEhD,UAAGA,SAAS,CAACJ,aAAV,KAA4BA,aAA/B,EACI,OAAO;AAACA,QAAAA,aAAD;AAAeC,QAAAA;AAAf,OAAP,CADJ,KAGI,OAAOG,SAAP;AACP,KANyB,CAA1B;AAOAN,IAAAA,aAAa,CAACI,iBAAD,CAAb;AAEH;;AAED,WAASG,YAAT,CAAsBC,KAAtB,EAA6B;AAKzBA,IAAAA,KAAK,CAACC,cAAN;AAGAf,IAAAA,qBAAqB,CAACK,UAAD,CAArB,CACKW,SADL,CACgBC,QAAD,IAAc;AACrBnB,MAAAA,eAAe,CAACoB,WAAhB,CAA4B,gCAA5B;AAGH,KALL,EAKQhB,YALR;AAOH;;AAED,WAASiB,gBAAT,GAA2B;AACvBpB,IAAAA,eAAe,GACViB,SADL,CACgBI,MAAD,IAAY;AAEhBd,MAAAA,aAAa,CAACc,MAAD,CAAb;AAGN,KANL,EAMOlB,YANP;AAOH;;AAIDN,EAAAA,SAAS,CAAC,MAAM;AAIZuB,IAAAA,gBAAgB;AAKnB,GATQ,EASN,EATM,CAAT;AAcA,sBACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEI,oBAAC,SAAD;AAAW,IAAA,QAAQ,EAAC,IAApB;AAAyB,IAAA,SAAS,EAAC,MAAnC;AAA0C,IAAA,SAAS,EAAEf,OAAO,CAACiB,WAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,CAFJ,eAQI,oBAAC,SAAD;AAAW,IAAA,QAAQ,EAAC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,IAAD;AAAM,IAAA,OAAO,EAAC,QAAd;AACM,IAAA,SAAS,MADf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEI,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAE,CAAV;AAAa,IAAA,IAAI,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAM,IAAA,SAAS,EAAEjB,OAAO,CAACkB,aAAzB;AAAwC,IAAA,QAAQ,EAAET,YAAlD;AAAgE,IAAA,UAAU,MAA1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEI,oBAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAgB,IAAA,OAAO,EAAE,CAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMKR,UAAU,CAACM,GAAX,CAAgBC,SAAD,iBAGZ,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,EAAf;AAAmB,IAAA,GAAG,EAAEA,SAAS,CAACJ,aAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEI,oBAAC,SAAD;AAEI,IAAA,IAAI,EAAEI,SAAS,CAACJ,aAFpB;AAGI,IAAA,OAAO,EAAC,UAHZ;AAII,IAAA,QAAQ,MAJZ;AAKI,IAAA,SAAS,MALb;AAMI,IAAA,EAAE,EAAEI,SAAS,CAACJ,aANlB;AAOI,IAAA,KAAK,EAAEI,SAAS,CAACJ,aAPrB;AAQI,IAAA,KAAK,EAAEI,SAAS,CAACH,QARrB;AASI,IAAA,OAAO,EAAEc,CAAC,IAAIhB,eAAe,CAACK,SAAS,CAACJ,aAAX,EAAyBe,CAAC,CAACC,MAAF,CAASC,KAAlC,CATjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CAHH,CANL,CAFJ,eAqCI,oBAAC,MAAD;AACI,IAAA,IAAI,EAAC,QADT;AAEI,IAAA,SAAS,MAFb;AAGI,IAAA,OAAO,EAAC,WAHZ;AAII,IAAA,KAAK,EAAC,SAJV;AAKI,IAAA,SAAS,EAAErB,OAAO,CAACsB,qBALvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBArCJ,CADJ,CAFJ,CADJ,CARJ,CADJ;AAsEH;;AAED,eAAevB,eAAf","sourcesContent":["import {Button, Container, Grid, React, TextField, useEffect, useState} from \"../component\"\n\nimport {appNotification} from \"../shared/notification/app-notification\";\nimport {doGetThresholds, doUpdateAllThresholds} from \"./shared/authorityDispatcher\";\nimport {useGlobalStyles} from \"../styles/GlobalStyles\";\nimport {errorHandler} from \"../shared/common-helpers\";\n\nfunction UpdateThreshold() {\n\n    const classes = useGlobalStyles();\n\n    const [thresholds, setThresholds] = useState([]);\n\n    function updateThreshold(thresholdType,maxLimit){\n\n        const updatedThresholds = thresholds.map(threshold=>{\n\n            if(threshold.thresholdType === thresholdType)\n                return {thresholdType,maxLimit}\n            else\n                return threshold;\n        })\n        setThresholds(updatedThresholds)\n\n    }\n\n    function handleSubmit(event) {\n\n\n\n\n        event.preventDefault();\n\n\n        doUpdateAllThresholds(thresholds)\n            .subscribe((response) => {\n                appNotification.showSuccess(\"Succesfully Updated Thresholds\")\n\n\n            },  errorHandler)\n\n    }\n\n    function getAllThresholds(){\n        doGetThresholds()\n            .subscribe((result) => {\n\n                   setThresholds(result)\n\n\n            }, errorHandler)\n    }\n\n\n\n    useEffect(() => {\n\n\n\n        getAllThresholds();\n\n\n\n\n    }, [])\n\n\n\n\n    return (\n        <React.Fragment>\n\n            <Container maxWidth=\"md\" component=\"main\" className={classes.heroContent}>\n                <h1>\n                    Update Thresholds\n                </h1>\n                <hr />\n            </Container>\n            <Container maxWidth=\"md\">\n                <Grid justify=\"center\"\n                      container>\n                    <Grid md={8} item>\n                        <form className={classes.formFullWidth} onSubmit={handleSubmit} noValidate>\n\n                            <Grid container spacing={2}>\n\n\n\n\n\n                                {thresholds.map((threshold) => (\n\n\n                                    <Grid item xs={12} key={threshold.thresholdType}>\n\n                                        <TextField\n\n                                            name={threshold.thresholdType}\n                                            variant=\"outlined\"\n                                            required\n                                            fullWidth\n                                            id={threshold.thresholdType}\n                                            label={threshold.thresholdType}\n                                            value={threshold.maxLimit}\n                                            onInput={e => updateThreshold(threshold.thresholdType,e.target.value)}\n\n                                        />\n                                    </Grid>\n\n\n                                ))}\n\n\n\n\n\n\n\n                            </Grid>\n                            <Button\n                                type=\"submit\"\n                                fullWidth\n                                variant=\"contained\"\n                                color=\"primary\"\n                                className={classes.submitWithSmallMargin}\n                            >\n                                Save Thresholds\n                            </Button>\n\n                        </form>\n\n                    </Grid>\n                </Grid>\n            </Container>\n\n\n        </React.Fragment>\n\n    )\n}\n\nexport default UpdateThreshold\n"]},"metadata":{},"sourceType":"module"}