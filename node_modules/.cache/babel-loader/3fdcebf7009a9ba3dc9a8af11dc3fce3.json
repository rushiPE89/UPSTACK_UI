{"ast":null,"code":"var _jsxFileName = \"/Users/rushikeshkhadsare/Downloads/upstac-ui/src/lab/PendingLabTests.js\";\nimport { Container, Grid, makeStyles, React, useEffect, useHistory, useState } from \"../component\";\nimport MUIDataTable from \"mui-datatables\";\nimport { appNotification } from \"../shared/notification/app-notification\";\nimport { doAssignLabResult, doGetPendingTestRequests } from \"./labDispatcher\";\nimport { confirmMessageService } from \"../shared/confirm/confirm-message-service\";\nimport Button from '@material-ui/core/Button';\nimport AssignmentIndIcon from '@material-ui/icons/AssignmentInd';\nimport { useDispatch } from \"react-redux\";\nimport { useGlobalStyles } from \"../styles/GlobalStyles\";\nimport { errorHandler } from \"../shared/common-helpers\";\n\nfunction PendingLabTests() {\n  const classes = useGlobalStyles();\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const [data, setData] = useState([]);\n  const [requests, setRequests] = useState([]);\n  const columns = [{\n    name: \"Request ID\",\n    options: {\n      filter: true\n    }\n  }, {\n    name: \"Name\",\n    options: {\n      filter: true\n    }\n  }, {\n    name: \"Age\",\n    options: {\n      filter: true\n    }\n  }, {\n    name: \"Status\",\n    options: {\n      filter: true\n    }\n  }, {\n    name: 'Actions',\n    options: {\n      filter: false,\n      sort: false,\n      empty: true,\n      customBodyRenderLite: dataIndex => {\n        return /*#__PURE__*/React.createElement(Button, {\n          variant: \"contained\",\n          color: \"secondary\",\n          className: classes.button,\n          startIcon: /*#__PURE__*/React.createElement(AssignmentIndIcon, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 36\n            }\n          }),\n          onClick: () => {\n            onAssignToMeClicked(dataIndex);\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 31\n          }\n        }, \"Assign to Me\");\n      }\n    }\n  }];\n  const options = {\n    filter: true,\n    filterType: 'dropdown',\n    responsive: 'standard',\n    selectableRows: 'none'\n  };\n\n  async function onAssignToMeClicked(index) {\n    const pendingRequest = requests[index];\n    await confirmMessageService.show(\"Do you want to Assign yourself for testing \" + pendingRequest.name + \"?\");\n    doAssignLabResult(pendingRequest.requestId).subscribe(res => {\n      appNotification.showSuccess(\"Request Assigned to you, Please Goto \" + pendingRequest.address + \" and  update the details.\");\n      history.push(\"/update-lab-report/\" + pendingRequest.requestId);\n    }, errorHandler);\n  }\n\n  function reloadTests() {\n    doGetPendingTestRequests().subscribe(pendingTests => {\n      console.log(\"pendingTests\", pendingTests);\n      setRequests(pendingTests);\n      const buffer = pendingTests.map(item => {\n        return [item.requestId, item.name, item.age, item.status];\n      });\n      const results = [];\n      results.push(buffer);\n      setData(buffer);\n    }, errorHandler);\n  }\n\n  useEffect(() => {\n    reloadTests();\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    maxWidth: \"md\",\n    component: \"main\",\n    className: classes.heroContent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 17\n    }\n  }, \"Pending Tests\"), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Container, {\n    component: \"main\",\n    maxWidth: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(MUIDataTable, {\n    title: \"Pending Tests\",\n    data: data,\n    columns: columns,\n    options: options,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 25\n    }\n  })))));\n}\n\nexport default PendingLabTests;","map":{"version":3,"sources":["/Users/rushikeshkhadsare/Downloads/upstac-ui/src/lab/PendingLabTests.js"],"names":["Container","Grid","makeStyles","React","useEffect","useHistory","useState","MUIDataTable","appNotification","doAssignLabResult","doGetPendingTestRequests","confirmMessageService","Button","AssignmentIndIcon","useDispatch","useGlobalStyles","errorHandler","PendingLabTests","classes","history","dispatch","data","setData","requests","setRequests","columns","name","options","filter","sort","empty","customBodyRenderLite","dataIndex","button","onAssignToMeClicked","filterType","responsive","selectableRows","index","pendingRequest","show","requestId","subscribe","res","showSuccess","address","push","reloadTests","pendingTests","console","log","buffer","map","item","age","status","results","heroContent"],"mappings":"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","sourcesContent":["import {Container, Grid, makeStyles, React, useEffect, useHistory, useState,} from \"../component\"\nimport MUIDataTable from \"mui-datatables\";\nimport {appNotification} from \"../shared/notification/app-notification\";\nimport {doAssignLabResult, doGetPendingTestRequests} from \"./labDispatcher\";\nimport {confirmMessageService} from \"../shared/confirm/confirm-message-service\";\nimport Button from '@material-ui/core/Button';\n\nimport AssignmentIndIcon from '@material-ui/icons/AssignmentInd';\nimport {useDispatch} from \"react-redux\";\nimport {useGlobalStyles} from \"../styles/GlobalStyles\";\nimport {errorHandler} from \"../shared/common-helpers\";\n\n\n\n\nfunction PendingLabTests() {\n\n    const classes = useGlobalStyles();\n    const history = useHistory();\n    const dispatch = useDispatch()\n    const [data, setData] = useState([]);\n\n    const [requests, setRequests] = useState([]);\n    const columns = [\n\n        {\n            name: \"Request ID\",\n            options: {\n                filter: true,\n            }\n        },\n        {\n            name: \"Name\",\n            options: {\n                filter: true,\n            }\n        },\n        {\n\n            name: \"Age\",\n            options: {\n                filter: true,\n            }\n        },\n        {\n\n            name: \"Status\",\n            options: {\n                filter: true,\n            }\n        },\n        {\n            name: 'Actions',\n            options: {\n                filter: false,\n                sort: false,\n                empty: true,\n                customBodyRenderLite: (dataIndex) => {\n\n                    return    <Button\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        className={classes.button}\n                        startIcon={<AssignmentIndIcon />}\n                        onClick={() => {\n                            onAssignToMeClicked(dataIndex)\n                        }}\n                    >\n                        Assign to Me\n                    </Button>\n\n                },\n            }\n        }\n\n    ];\n\n\n\n\n    const options = {\n        filter: true,\n        filterType: 'dropdown',\n        responsive: 'standard',\n        selectableRows:'none',\n\n    };\n\n\n    async function onAssignToMeClicked(index){\n        const pendingRequest = requests[index]\n\n\n            await confirmMessageService.show(\"Do you want to Assign yourself for testing \" + pendingRequest.name + \"?\")\n\n            doAssignLabResult(pendingRequest.requestId).subscribe((res)=>{\n                appNotification.showSuccess(\"Request Assigned to you, Please Goto \"+ pendingRequest.address+\" and  update the details.\")\n\n                history.push(\"/update-lab-report/\" + pendingRequest.requestId)\n\n            }, errorHandler);\n\n\n\n\n    }\n\n\n\n    function reloadTests() {\n\n        doGetPendingTestRequests()\n            .subscribe((pendingTests) => {\n                console.log(\"pendingTests\",pendingTests)\n\n                setRequests(pendingTests)\n                const buffer = pendingTests.map(item=>{\n\n                    return [item.requestId,item.name,item.age,item.status]\n                })\n\n                const results = []\n                results.push(buffer)\n                setData(buffer)\n\n            }, errorHandler)\n    }\n\n\n    useEffect(() => {\n\n\n        reloadTests();\n\n\n\n\n\n    }, [])\n\n\n\n    return (\n        <React.Fragment>\n            <Container maxWidth=\"md\" component=\"main\" className={classes.heroContent}>\n                <h1>\n                   Pending Tests\n                </h1>\n                <hr />\n            </Container>\n            <Container component=\"main\" maxWidth=\"md\">\n                <Grid container>\n                    <Grid item md={12}>\n\n                        <MUIDataTable title={\"Pending Tests\"} data={data} columns={columns} options={options} />\n\n                    </Grid>\n                </Grid>\n            </Container>\n        </React.Fragment>\n\n    )\n}\n\nexport default PendingLabTests\n"]},"metadata":{},"sourceType":"module"}