{"ast":null,"code":"var _jsxFileName = \"/Users/rushikeshkhadsare/Downloads/upstac-ui/src/documents/UploadDocument.js\";\nimport { Button, Checkbox, Container, CssBaseline, FormControlLabel, Grid, makeStyles, Typography, useHistory } from \"../component\";\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { appNotification } from \"../shared/notification/app-notification\";\nimport { doUploadDocument } from \"../auth/authDispatcher\";\nimport { useLocation, useRouteMatch } from 'react-router-dom';\nimport { useGlobalStyles } from \"../styles/GlobalStyles\";\nexport function UploadDocument(props) {\n  const classes = useGlobalStyles();\n  const history = useHistory();\n  let {\n    params\n  } = useRouteMatch(\"/upload-document/:role/:id\");\n  const {\n    role,\n    id\n  } = params;\n  const [selectedFiles, setSelectedFiles] = useState(null);\n  const [disabled, setDisabled] = useState(false);\n  const [isAgreed, setIsAgreed] = useState(false);\n  const isDoctor = role === \"DOCTOR\";\n  const isTester = role === \"TESTER\";\n  let text = \"Please upload the ID card to continue\";\n  if (isTester) text = \"Please upload the Lab Tester ID card for account verification\";else if (isDoctor) text = \"Please upload the Doctor ID card for account verification\";\n\n  async function uploadFile(event) {\n    event.preventDefault();\n\n    if (!isAgreed) {\n      appNotification.showError(\"Please agree to the terms and conditions\");\n      return;\n    }\n\n    const hasFileData = input => {\n      const files = input || [];\n      return files && files.length > 0;\n    };\n\n    if (hasFileData(selectedFiles) == false) {\n      appNotification.showError(\"Please Select a Document to upload\");\n      return;\n    } // let file = files[0];\n\n\n    setDisabled(true);\n    doUploadDocument(id, selectedFiles[0]).subscribe(response => {\n      appNotification.showSuccess(\"Succesfully Uploaded Document, You will be notified after its approved\");\n      history.push(\"/\");\n    }, error => {\n      console.log(\"server error\");\n      appNotification.showError(error);\n      setDisabled(false);\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(Container, {\n    component: \"main\",\n    maxWidth: \"xs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CssBaseline, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.paper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    component: \"h1\",\n    variant: \"h5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }\n  }, text), /*#__PURE__*/React.createElement(\"form\", {\n    className: classes.formFullWidthOneSpace,\n    onSubmit: uploadFile,\n    noValidate: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    id: \"fileUpdate\",\n    onChange: e => setSelectedFiles(e.target.files),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(FormControlLabel, {\n    id: \"documentAgreeCondition\",\n    control: /*#__PURE__*/React.createElement(Checkbox, {\n      checked: isAgreed,\n      onChange: e => setIsAgreed(e.target.checked),\n      value: \"allowExtraEmails\",\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 42\n      }\n    }),\n    label: \"I agree that all the information provided is Genuine.\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 29\n    }\n  }))), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    fullWidth: true,\n    variant: \"contained\",\n    color: \"primary\",\n    className: classes.submitWithSmallMargin,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 21\n    }\n  }, \"Upload\"))));\n}","map":{"version":3,"sources":["/Users/rushikeshkhadsare/Downloads/upstac-ui/src/documents/UploadDocument.js"],"names":["Button","Checkbox","Container","CssBaseline","FormControlLabel","Grid","makeStyles","Typography","useHistory","React","useState","useDispatch","appNotification","doUploadDocument","useLocation","useRouteMatch","useGlobalStyles","UploadDocument","props","classes","history","params","role","id","selectedFiles","setSelectedFiles","disabled","setDisabled","isAgreed","setIsAgreed","isDoctor","isTester","text","uploadFile","event","preventDefault","showError","hasFileData","input","files","length","subscribe","response","showSuccess","push","error","console","log","paper","formFullWidthOneSpace","e","target","checked","submitWithSmallMargin"],"mappings":"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","sourcesContent":["import {\r\n    Button,\r\n    Checkbox,\r\n    Container,\r\n    CssBaseline,\r\n    FormControlLabel,\r\n    Grid,\r\n    makeStyles,\r\n    Typography,\r\n    useHistory\r\n} from \"../component\"\r\n\r\nimport React, {useState} from 'react';\r\nimport {useDispatch} from 'react-redux';\r\nimport {appNotification} from \"../shared/notification/app-notification\";\r\nimport {doUploadDocument} from \"../auth/authDispatcher\";\r\nimport {useLocation, useRouteMatch} from 'react-router-dom';\r\nimport {useGlobalStyles} from \"../styles/GlobalStyles\";\r\n\r\n\r\n\r\nexport function UploadDocument(props) {\r\n\r\n    const classes = useGlobalStyles();\r\n    const history = useHistory();\r\n\r\n    let {params} = useRouteMatch(\"/upload-document/:role/:id\");\r\n\r\n    const {role,id} =params\r\n    const [selectedFiles, setSelectedFiles] = useState(null)\r\n    const [disabled, setDisabled] = useState(false)\r\n    const [isAgreed, setIsAgreed] = useState(false);\r\n\r\n\r\n\r\n\r\n       const isDoctor = (role === \"DOCTOR\")\r\n        const isTester = (role === \"TESTER\")\r\n\r\n    let text=\"Please upload the ID card to continue\"\r\n\r\n    if(isTester)\r\n     text=\"Please upload the Lab Tester ID card for account verification\"\r\n    else if(isDoctor)\r\n        text=\"Please upload the Doctor ID card for account verification\"\r\n\r\n\r\n    async function uploadFile(event) {\r\n        event.preventDefault();\r\n\r\n\r\n        if(!isAgreed ){\r\n            appNotification.showError(\"Please agree to the terms and conditions\")\r\n            return;\r\n        }\r\n\r\n    const hasFileData  = (input)=>{\r\n            const files = input || []\r\n            return (files  && files.length >0)\r\n    }\r\n\r\n\r\n        if(hasFileData(selectedFiles) == false){\r\n            appNotification.showError(\"Please Select a Document to upload\")\r\n            return;\r\n        }\r\n       // let file = files[0];\r\n\r\n\r\n        setDisabled(true)\r\n\r\n        doUploadDocument(id,selectedFiles[0])\r\n            .subscribe( (response) =>{\r\n\r\n\r\n                appNotification.showSuccess(\"Succesfully Uploaded Document, You will be notified after its approved\" )\r\n                history.push(\"/\")\r\n\r\n            },(error => {\r\n                console.log(\"server error\")\r\n                appNotification.showError(error )\r\n                setDisabled(false)\r\n            }))\r\n    }\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline />\r\n            <div className={classes.paper}>\r\n\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    {text}\r\n                </Typography>\r\n\r\n\r\n                <form className={classes.formFullWidthOneSpace} onSubmit={uploadFile} noValidate>\r\n\r\n                    <Grid container spacing={2}>\r\n\r\n\r\n                        <Grid item xs={12}>\r\n                            <input type=\"file\"   id=\"fileUpdate\"  onChange={e => setSelectedFiles(e.target.files)}/>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12}>\r\n                            <FormControlLabel\r\n                                id=\"documentAgreeCondition\"\r\n                                control={<Checkbox checked={isAgreed} onChange={e => setIsAgreed(e.target.checked)} value=\"allowExtraEmails\" color=\"primary\" />}\r\n                                label=\"I agree that all the information provided is Genuine.\"\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submitWithSmallMargin}\r\n                    >\r\n                        Upload\r\n                    </Button>\r\n\r\n                </form>\r\n\r\n            </div>\r\n\r\n        </Container>\r\n\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}